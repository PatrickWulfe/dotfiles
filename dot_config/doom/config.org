#+TITLE: Doom Emacs Config
#+AUTHOR: Patick Wulfe
#+LANGUAGE: en
#+PROPERTY: header-args:emacs-lisp :tangle config.el

* Emacs 29 bug
#+begin_src elisp
;; (general-auto-unbind-keys :off)
;; (remove-hook 'doom-after-init-modules-hook #'general-auto-unbind-keys)
#+end_src
* User info
Setting personal info
#+begin_src elisp
(setq user-full-name "Patrick Wulfe"
      user-mail-address "wulfep@gmail.com")
#+end_src

* UI
** Fonts
I really like the 'r' and 'g' in Fira Code, so it's my favorite font for coding
Open sans is close to the sans font Google uses for Android, which I'm a big fan of
#+begin_src elisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 16)
      doom-unicode-font (font-spec :family "FiraCode Nerd Font")
      doom-variable-pitch-font (font-spec :family "Open Sans" :size 13 :weight 'medium)
      doom-big-font (font-spec :family "Open Sans")
      doom-serif-font (font-spec :family "FiraCode Nerd Font"))
#+end_src

** Theme
I customized the horizon theme to adjust some of the syntax colors and background
#+begin_src elisp
(setq doom-theme 'my-doom-horizon)
(setq doom-modeline-major-mode-icon t)
#+end_src

Add highlighting to operators
[[https://stackoverflow.com/questions/5831036/how-to-customize-emacs-in-python-mode-to-highlight-operators]]
Doesn't work with tree-sitter active, but I still prefer it when tree-sitter isn't active
#+begin_src elisp
(defface font-lock-operator-face
  '((t (:foreground "#21BFC2"))) "Basic face for operator." :group 'basic-faces)
;; C-Like
(dolist (mode-iter '(c-mode c++-mode dart-mode glsl-mode java-mode javascript-mode rust-mode))
  (font-lock-add-keywords mode-iter
   '(("\\([~^&\|!<>=,.\\+*/%-;:?]\\)" 0 'font-lock-operator-face keep))))
;; Scripting
(dolist (mode-iter '(python-mode lua-mode))
  (font-lock-add-keywords mode-iter
  '(("\\([@~^&\|!<>:=,.\\+*/%-]\\)" 0 'font-lock-operator-face keep))))
#+end_src

** Transparency
#+begin_src elisp
(set-frame-parameter (selected-frame) 'alpha-background 97)
(add-to-list 'default-frame-alist '(alpha-background . 97))
#+end_src

** Nyan-Mode
Adds the Nyan-cat progress bar on the modeline
#+begin_src elisp
(use-package! nyan-mode
  :after doom-modeline
  :init
  (setq nyan-bar-length 40)
  (setq nyan-animate-cat t)
  (setq nyan-wavy-trail t)
   (nyan-mode))
;; Start animation on page load
(add-hook 'text-mode-hook 'nyan-start-animation)
#+end_src

** Rainbow Delimiters
Rainbow delimiters are amazing, incredibly useful for lisp and other languages that are parenth heavy
#+begin_src elisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

** Line Numbers
Relative line numbers to make vim commands easier
#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src

** Indent Guides
#+begin_src elisp
(use-package! highlight-indent-guides
  :config
  (setq highlight-indent-guides-responsive 'stack)
  ;; (setq highlight-indent-guides-auto-odd-face-perc 30)
  ;; (setq highlight-indent-guides-auto-even-face-perc 20)
  ;; (setq highlight-indent-guides-auto-character-face-perc 30)
  )
#+end_src

**  Zoom
Automatically resize windows
#+begin_src elisp
(use-package! zoom
  :config
  (setq zoom-mode t)
  (setq zoom-ignore-predicates (lambda ()
    (equal which-key-buffer-name
         (buffer-file-name (current-buffer))))))
#+end_src

** Scroll modifications
We have nyan-mode so the scrollbar is redundant
#+begin_src elisp
(good-scroll-mode 1)
(scroll-bar-mode -1)
#+end_src

** Disable exit prompt
Annoying and not useful when I want to be able to get in/out of Emacs in as little time as possible
#+begin_src elisp
(setq confirm-kill-emacs nil)
#+end_src

* General Config
** Make undo better
Increase the limit and give more fine tuned control on undo
#+begin_src elisp
(setq undo-limit 80000000
      evil-want-fine-undo t)
#+end_src

** Folder locations
Set default folder locations
#+begin_src elisp
(setq org-directory "~/org/")
#+end_src

* Keybinds
** Dotfiles
Add bands to quickly access my dotfiles within Emacs
#+begin_src elisp
(map! :leader
        (:prefix ("f ." . "open dotfile")
         :desc "Edit doom config.org" "d" #'(lambda () (interactive) (find-file "~/.config/doom/config.org"))
         :desc "Open qtile README.org" "q" #'(lambda () (interactive) (find-file "~/.config/qtile/README.org"))
         :desc "Edit alacritty.yml" "a" #'(lambda () (interactive) (find-file "~/.config/alacritty/alacritty.yml"))
         :desc "Open fish README.org" "f" #'(lambda () (interactive) (find-file "~/.config/fish/README.org"))
         ))
#+end_src

** Evil-Easymotion
Also prefer "SPC j" over "g s" for easymotion like in Spacemacs
#+begin_src elisp
(map! (:after evil-easymotion :leader "j" evilem-map))
(map! :leader :prefix ("j" . "jump"))
#+end_src

** Flutter
#+begin_src elisp
(map! :after dart-mode
      :map dart-mode-map
      :localleader
      "l" #'lsp
      "O" #'lsp-dart-show-flutter-outline
      "Q" #'flutter-quit
      "r" #'flutter-hot-reload
      "R" #'flutter-run
      (:prefix ("c" . "create")
                        "b" #'create-dart-bloc
                        "c" #'create-dart-cubit)
      (:prefix ("d" . "debug")
                        "d" #'dap-debug
                        "r" #'lsp-dart-dap-flutter-hot-reload
                        "R" #'lsp-dart-dap-flutter-hot-restart
                        )
      (:prefix ("o" . "open")
                        "d" #'lsp-dart-open-devtools
                        )
      (:prefix ("p" . "pub")
                        "g" #'lsp-dart-pub-get
                        "o" #'lsp-dart-pub-outdated
                        "u" #'lsp-dart-pub-upgrade
                        )
      (:prefix ("t" . "test"))
      )
#+end_src

** General
*** Switch execute command and dired jump
I use M-x much more often and dired jump is redundent anyway since it is also bound to "SPC p f"
#+begin_src elisp
(map! :leader
      :desc "M-x" "SPC" #'execute-extended-command
      :desc "Find file in project" ":" #'projectile-find-file)
#+end_src

*** Set ',' as localleadder
I use this often enough that it's worth mapping the localleader away from "SPC m"
#+begin_src elisp
(setq doom-leader-key "SPC"
      doom-localleader-key ",")
#+end_src

*** Leader general commands
I prefer having the comment operator bound like in Spacemacs over "g c"
#+begin_src elisp
(map! :leader
      :desc "Comment operator" ";" #'evilnc-comment-operator)
#+end_src

** Good-Scroll
#+begin_src elisp
(map! (:after evil
 :m "C-u" #'good-scroll-down
 :m "C-d" #'good-scroll-up
 :m "C-b" #'good-scroll-down-full-screen
 :m "C-f" #'good-scroll-up-full-screen))
#+end_src

** Org-mode
Add some org-mode keybinds
#+begin_src elisp
(after! org (map! :localleader
                  :map org-mode-map
                  :desc "Org babel tangle" "B" #'org-babel-tangle))
#+end_src

** Projectile
Add bind to go back and forth between test and implimentation files, useful for TDD and BDD
#+begin_src elisp
(map! :leader
      :desc "Go to test/implimentation file" "p j"
      #'projectile-toggle-between-implementation-and-test)
#+end_src

** Tree-Sitter
#+begin_src elisp
(map! :leader
 (:prefix ("T" . "tree-sitter")
  :desc "TS node at point" "n" #'tree-sitter-node-at-point))
#+end_src

** Yasnippet
Adding some utility binds for snippets
#+begin_src elisp
(map! :leader
      (:prefix ("y" . "snippets")
       :desc "Insert" "i" #'yas-insert-snippet
       :desc "New" "n" #'yas-new-snippet
       :desc "Tryout" "t" #'yas-tryout-snippet
      ))
#+end_src

* Package Settings
** Company
Move snippets above lsp
#+begin_src elisp
(use-package! company
  :config
  (require 'doom-snippets)
  :after '
    (setq +lsp-company-backends '(:separate company-yasnippet company-capf))
  )
#+end_src

** LSP
#+begin_src elisp
(use-package! lsp-mode
  :custom
  (lsp-headerline-breadcrumb-enable t))
#+end_src

** Projectile
Add default project directory for projectile
#+begin_src elisp
(setq projectile-project-search-path '("~/dev/"))
#+end_src

Prompt to create new test file when not found
#+begin_src elisp
(setq projectile-create-missing-test-files t)
#+end_src

** Tree-Sitter
#+begin_src elisp
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (tree-sitter-require 'dart)
  (global-tree-sitter-mode)
  (setq tree-sitter-hl-mode t)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
(pushnew! tree-sitter-major-mode-language-alist
          '(dart-mode . dart))
#+end_src

** Treemacs
Default doom theme is minimal and doesn't use file type icons, I much prefer this one
#+begin_src elisp
(use-package! treemacs
  :config
  (require 'treemacs-diagnostics)
    (setq doom-themes-treemacs-theme "doom-colors")
    (setq treemacs-position 'right)
  )
;; (setq treemacs-width 30)
#+end_src

** Yasnippets
Add custom snippet folder to personal config location for easy access with "SPC f p"
#+begin_src elisp
(use-package doom-snippets
  :load-path "~/.config/doom/snippets"
  :after yasnippet)
#+end_src

** Yatemplate
Add file templates with yasnippets, useful for blocs and other file templates
#+begin_src elisp
(auto-insert-mode t)
(use-package! yatemplate
  :after yasnippet
  :config
  ;; Define template directory
  (setq yatemplate-dir (concat doom-private-dir "templates"))
  ;; Coupling with auto-insert
  ;; (setq auto-insert-alist nil)
  (yatemplate-fill-alist)
  (add-hook 'find-file-hook 'auto-insert)
  )
#+end_src

** Evil-Snipe
Setting the scope for evil-snipe, the default is in line, which isn't nearly as useful
#+begin_src elisp
(setq evil-snipe-scope 'visible
      evil-snipe-spillover-scope 'buffer)
#+end_src

** Evil-Motion-Trainer
The popup notification is working, but I think it may be incompatible with Doom 3.0's alpha. May re-enable if it gets updated
#+begin_src elisp
(use-package! evil-motion-trainer
  :init
  (global-evil-motion-trainer-mode 1)
  :config
  (setq evil-motion-trainer-threshold 5))
;; (setq evil-motion-trainer-super-annoying-mode t)
#+end_src

** Mixed-pitch
Add support for multiple fonts
#+begin_src elisp
(use-package mixed-pitch
  :hook
  (text-mode . mixed-pitch-mode))
#+end_src

* Lang Specific Configs
** C/C++
*** Enable LSP on load for C/C++
#+begin_src elisp
(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)
#+end_src

** Flutter
*** Flutter setup with major mode keybinds
Setting up Doom to be a Flutter IDE
#+begin_src elisp
(use-package! dart-mode
  :config
  ;; (set-face-foreground 'fill-column-indicator "violet")
  (require 'whitespace)
  (setq whitespace-line-column 80)
  (setq whitespace-style '(face lines-tail)))

(use-package! hover
  :config
  (setq hover-hot-reload-on-save t
        hover-clear-buffer-on-hot-restart t
        hover-screenshot-path "$HOME/Pictures"))

(use-package! lsp-dart
  :after dart-mode
  :config
  (setq lsp-dart-dap-flutter-hot-reload-on-save t))

;; enable lsp on load
(add-hook 'dart-mode-hook 'whitespace-mode)
(add-hook 'dart-mode-hook 'lsp)
(add-hook 'dart-mode-hook #'display-fill-column-indicator-mode)

;; adjust garbage collection
(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024))
#+end_src

*** Disable Run/Debug Code Lens
I have keybinds for these, and the goal is to never use the mouse, so I'll never click on these anyway, so they're just clutter
#+begin_src elisp
(setq lsp-dart-main-code-lens nil
      lsp-dart-test-code-lens nil)
#+end_src

*** Flycheck
#+begin_src elisp
;; (use-package flutter-l10n-flycheck
;;   :after flutter
;;   :config
;;   (flutter-l10n-flycheck-setup))
#+end_src

*** Projectile
#+begin_src elisp
(with-eval-after-load 'projectile
  (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
  (add-to-list 'projectile-project-root-files-bottom-up "BUILD"))
(after! projectile
(projectile-register-project-type 'flutter '("pubspec.yaml")
                                  :project-file "pubspec.yaml"
                                  :src-dir "lib/"
                                  :test "flutter test"
                                  :test-dir "test/"
                                  :test-suffix "_test"))
#+end_src

** JavaScript
*** dap-mode setup
Set up dap mode for debugging JS
#+begin_src elisp
(require 'dap-node)
#+end_src

*** Prettier
#+begin_src elisp
(setq prettier-js-args '(
                         "--trailing-comma" "all"
                         "--single-quote" "true"
                         "--jsx-single-quote" "true"
                         "--jsx-bracket-same-line" "false"
                         ))
#+end_src

** Python
*** LS
#+begin_src elisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda () (require 'lsp-pyright)
                         (lsp))))
#+end_src

* Functions
** Dart/Flutter
Functions for creating empty files in a bloc folder that will be populated by Yatemplate when opened
#+begin_src elisp
(defun create-dart-bloc (blocSubject)
  "Create dart bloc files (bloc, state, event)"
  (interactive "sBloc Subject: \n")
  (make-empty-file (concat "./bloc/" blocSubject "_bloc.dart"))
  (make-empty-file (concat "./bloc/" blocSubject "_event.dart"))
  (make-empty-file (concat "./bloc/" blocSubject "_state.dart"))
  )
(defun create-dart-cubit (cubitSubject)
  "Create dart cubit files (cubit, state)"
  (interactive "sCubit Subject: \n")
  (make-empty-file (concat "./cubit/" cubitSubject "_cubit.dart"))
  (make-empty-file (concat "./cubit/" cubitSubject "_state.dart"))
  )
#+end_src
